;; Object classes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "classes/"
  :tables (list 
   (semanticdb-table "resultsetmetadata.h"
    :major-mode 'c-mode
    :tags '(("../unit_fixture.h" include nil nil [447 475]) ("cstdio" include (:system-flag t) nil [476 493]) ("testsuite" type (:members (("classes" type (:members (("resultsetmetadata" type (:superclasses ("unit_fixture") :members (("private" label nil (reparse-symbol classsubparts) [634 642]) ("super" type (:typedef ("unit_fixture" type (:type "class") nil nil) :superclasses "unit_fixture" :type "typedef") (reparse-symbol classsubparts) [645 672]) ("protected" label nil (reparse-symbol classsubparts) [674 684]) ("runStandardQuery" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [749 773]) ("runStandardPSQuery" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [860 886]) ("doGetCatalogName" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [912 923]) ("got_warning" variable (:type "bool") (reparse-symbol arg-sub-list) [924 942])) :type "void") (reparse-symbol classsubparts) [890 943]) ("doGetColumnCount" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [968 979])) :type "void") (reparse-symbol classsubparts) [946 980]) ("doGetColumnDisplaySize" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1011 1022])) :type "void") (reparse-symbol classsubparts) [983 1023]) ("doGetColumnNameAndLabel" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1055 1066])) :type "void") (reparse-symbol classsubparts) [1026 1067]) ("doGetPrecision" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1090 1101])) :type "void") (reparse-symbol classsubparts) [1070 1102]) ("doGetScale" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1121 1132])) :type "void") (reparse-symbol classsubparts) [1105 1133]) ("doGetSchemaName" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1157 1168])) :type "void") (reparse-symbol classsubparts) [1136 1169]) ("doGetTableName" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1192 1203])) :type "void") (reparse-symbol classsubparts) [1172 1204]) ("doIsAutoIncrement" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1230 1241])) :type "void") (reparse-symbol classsubparts) [1207 1242]) ("doIsCaseSensitive" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1268 1279])) :type "void") (reparse-symbol classsubparts) [1245 1280]) ("doIsZerofill" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1301 1312])) :type "void") (reparse-symbol classsubparts) [1283 1313]) ("doIsCurrency" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1334 1345])) :type "void") (reparse-symbol classsubparts) [1316 1346]) ("doIsDefinitelyWritable" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1377 1388])) :type "void") (reparse-symbol classsubparts) [1349 1389]) ("doIsNullable" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1410 1421])) :type "void") (reparse-symbol classsubparts) [1392 1422]) ("doIsReadOnly" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1443 1454])) :type "void") (reparse-symbol classsubparts) [1425 1455]) ("doIsSearchable" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1478 1489])) :type "void") (reparse-symbol classsubparts) [1458 1490]) ("doIsSigned" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1509 1520])) :type "void") (reparse-symbol classsubparts) [1493 1521]) ("doIsWritable" function (:prototype-flag t :arguments (("is_ps" variable (:type "bool") (reparse-symbol arg-sub-list) [1542 1553])) :type "void") (reparse-symbol classsubparts) [1524 1554]) ("public" label nil (reparse-symbol classsubparts) [1556 1563]) ("EXAMPLE_TEST_FIXTURE" function (:arguments (("" variable (:type ("resultsetmetadata" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1588 1606])) :type "int") (reparse-symbol classsubparts) [1567 2184]) ("getCatalogName" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [2402 2424]) ("getColumnCount" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [2642 2664]) ("getColumnDisplaySize" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [2886 2914]) ("getColumnNameAndLabel" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3164 3193]) ("getColumnType" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3407 3428]) ("getPrecision" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3642 3662]) ("getScale" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [3872 3888]) ("getSchemaName" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [4103 4124]) ("getTableName" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [4338 4358]) ("isAutoIncrement" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [4575 4598]) ("isCaseSensitive" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [4815 4838]) ("isZerofill" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [5050 5068]) ("isCurrency" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [5280 5298]) ("isDefinitelyWritable" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [5520 5548]) ("isNullable" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [5760 5778]) ("isReadOnly" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [5990 6008]) ("isSearchable" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [6222 6242]) ("isSigned" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [6452 6468]) ("isWritable" function (:prototype-flag t :type "void") (reparse-symbol classsubparts) [6680 6698])) :type "class") (reparse-symbol namespacesubparts) [586 6702]) ("REGISTER_FIXTURE" function (:prototype-flag t :arguments (("" variable (:type ("resultsetmetadata" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6721 6739])) :type "int") (reparse-symbol namespacesubparts) [6704 6740])) :type "namespace") (reparse-symbol namespacesubparts) [565 6742])) :type "namespace") nil [543 6768]))
    :file "resultsetmetadata.h"
    :pointmax 6795
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
